// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: mesage.sql

package sqlc

import (
	"context"
)

const addMessage = `-- name: AddMessage :one
INSERT INTO "message" (
  "transaction_hash", "address", "token", "amount", "fee", "content", "nick"
) VALUES ($1, $2, $3, $4, $5, $6, $7) RETURNING transaction_hash, address, token, amount, fee, content, nick, added_at
`

type AddMessageParams struct {
	TransactionHash string
	Address         string
	Token           string
	Amount          string
	Fee             string
	Content         string
	Nick            string
}

func (q *Queries) AddMessage(ctx context.Context, arg AddMessageParams) (Message, error) {
	row := q.db.QueryRowContext(ctx, addMessage,
		arg.TransactionHash,
		arg.Address,
		arg.Token,
		arg.Amount,
		arg.Fee,
		arg.Content,
		arg.Nick,
	)
	var i Message
	err := row.Scan(
		&i.TransactionHash,
		&i.Address,
		&i.Token,
		&i.Amount,
		&i.Fee,
		&i.Content,
		&i.Nick,
		&i.AddedAt,
	)
	return i, err
}

const getMessageByHash = `-- name: GetMessageByHash :one
SELECT transaction_hash, address, token, amount, fee, content, nick, added_at FROM "message"
WHERE "transaction_hash" = $1
`

func (q *Queries) GetMessageByHash(ctx context.Context, transactionHash string) (Message, error) {
	row := q.db.QueryRowContext(ctx, getMessageByHash, transactionHash)
	var i Message
	err := row.Scan(
		&i.TransactionHash,
		&i.Address,
		&i.Token,
		&i.Amount,
		&i.Fee,
		&i.Content,
		&i.Nick,
		&i.AddedAt,
	)
	return i, err
}

const getMessagesByAddress = `-- name: GetMessagesByAddress :many
SELECT transaction_hash, address, token, amount, fee, content, nick, added_at FROM "message"
WHERE "address" = $1
`

func (q *Queries) GetMessagesByAddress(ctx context.Context, address string) ([]Message, error) {
	rows, err := q.db.QueryContext(ctx, getMessagesByAddress, address)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Message
	for rows.Next() {
		var i Message
		if err := rows.Scan(
			&i.TransactionHash,
			&i.Address,
			&i.Token,
			&i.Amount,
			&i.Fee,
			&i.Content,
			&i.Nick,
			&i.AddedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
