// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: profile.sql

package sqlc

import (
	"context"
)

const checkUserRegistration = `-- name: CheckUserRegistration :one
SELECT EXISTS (
    SELECT 1
    FROM "profile"
    WHERE address = $1
) AS is_registered
`

func (q *Queries) CheckUserRegistration(ctx context.Context, address string) (bool, error) {
	row := q.db.QueryRowContext(ctx, checkUserRegistration, address)
	var is_registered bool
	err := row.Scan(&is_registered)
	return is_registered, err
}

const createProfile = `-- name: CreateProfile :one
INSERT INTO "profile" (
  "address"
) VALUES ($1) RETURNING address, created_at
`

func (q *Queries) CreateProfile(ctx context.Context, address string) (Profile, error) {
	row := q.db.QueryRowContext(ctx, createProfile, address)
	var i Profile
	err := row.Scan(&i.Address, &i.CreatedAt)
	return i, err
}

const getProfile = `-- name: GetProfile :one
SELECT address, created_at FROM "profile"
WHERE address = $1
`

func (q *Queries) GetProfile(ctx context.Context, address string) (Profile, error) {
	row := q.db.QueryRowContext(ctx, getProfile, address)
	var i Profile
	err := row.Scan(&i.Address, &i.CreatedAt)
	return i, err
}
