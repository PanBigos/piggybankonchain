// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: proto/service/auth.proto

package service

import (
	context "context"
	v1 "github.com/Exca-DK/pegism/gen/go/proto/v1"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	AuthorizationService_Authorize_FullMethodName      = "/pegism.service.AuthorizationService/Authorize"
	AuthorizationService_GetAuthMessage_FullMethodName = "/pegism.service.AuthorizationService/GetAuthMessage"
	AuthorizationService_Refresh_FullMethodName        = "/pegism.service.AuthorizationService/Refresh"
)

// AuthorizationServiceClient is the client API for AuthorizationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthorizationServiceClient interface {
	// Authorize is used to obtain an access token for authentication.
	//
	// Parameters:
	//   - AuthRequest: Input containing authentication details.
	//
	// Returns:
	//   - AuthResponse: Response containing the access token.
	//
	// HTTP Mapping:
	//
	//	POST /v1/auth
	//	Body: "*"
	Authorize(ctx context.Context, in *v1.AuthRequest, opts ...grpc.CallOption) (*v1.AuthResponse, error)
	// GetAuthMessage returns an unsigned message for registration at the provided address.
	//
	// Parameters:
	//   - AuthMessageRequest: Input containing details for authentication message request.
	//
	// Returns:
	//   - AuthMessageResponse: Response containing the unsigned authentication message.
	//
	// HTTP Mapping:
	//
	//	GET /v1/auth/message
	GetAuthMessage(ctx context.Context, in *v1.AuthMessageRequest, opts ...grpc.CallOption) (*v1.AuthMessageResponse, error)
	// Refresh returns an new access token with its expiration.
	//
	// Parameters:
	//   - RefreshMessageRequest: Input containing valid access token.
	//
	// Returns:
	//   - RefreshMessageResponse: Response containing access token.
	//
	// HTTP Mapping:
	//
	//	GET /v1/auth/refresh
	Refresh(ctx context.Context, in *v1.RefreshMessageRequest, opts ...grpc.CallOption) (*v1.RefreshMessageResponse, error)
}

type authorizationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthorizationServiceClient(cc grpc.ClientConnInterface) AuthorizationServiceClient {
	return &authorizationServiceClient{cc}
}

func (c *authorizationServiceClient) Authorize(ctx context.Context, in *v1.AuthRequest, opts ...grpc.CallOption) (*v1.AuthResponse, error) {
	out := new(v1.AuthResponse)
	err := c.cc.Invoke(ctx, AuthorizationService_Authorize_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorizationServiceClient) GetAuthMessage(ctx context.Context, in *v1.AuthMessageRequest, opts ...grpc.CallOption) (*v1.AuthMessageResponse, error) {
	out := new(v1.AuthMessageResponse)
	err := c.cc.Invoke(ctx, AuthorizationService_GetAuthMessage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorizationServiceClient) Refresh(ctx context.Context, in *v1.RefreshMessageRequest, opts ...grpc.CallOption) (*v1.RefreshMessageResponse, error) {
	out := new(v1.RefreshMessageResponse)
	err := c.cc.Invoke(ctx, AuthorizationService_Refresh_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthorizationServiceServer is the server API for AuthorizationService service.
// All implementations must embed UnimplementedAuthorizationServiceServer
// for forward compatibility
type AuthorizationServiceServer interface {
	// Authorize is used to obtain an access token for authentication.
	//
	// Parameters:
	//   - AuthRequest: Input containing authentication details.
	//
	// Returns:
	//   - AuthResponse: Response containing the access token.
	//
	// HTTP Mapping:
	//
	//	POST /v1/auth
	//	Body: "*"
	Authorize(context.Context, *v1.AuthRequest) (*v1.AuthResponse, error)
	// GetAuthMessage returns an unsigned message for registration at the provided address.
	//
	// Parameters:
	//   - AuthMessageRequest: Input containing details for authentication message request.
	//
	// Returns:
	//   - AuthMessageResponse: Response containing the unsigned authentication message.
	//
	// HTTP Mapping:
	//
	//	GET /v1/auth/message
	GetAuthMessage(context.Context, *v1.AuthMessageRequest) (*v1.AuthMessageResponse, error)
	// Refresh returns an new access token with its expiration.
	//
	// Parameters:
	//   - RefreshMessageRequest: Input containing valid access token.
	//
	// Returns:
	//   - RefreshMessageResponse: Response containing access token.
	//
	// HTTP Mapping:
	//
	//	GET /v1/auth/refresh
	Refresh(context.Context, *v1.RefreshMessageRequest) (*v1.RefreshMessageResponse, error)
	mustEmbedUnimplementedAuthorizationServiceServer()
}

// UnimplementedAuthorizationServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAuthorizationServiceServer struct {
}

func (UnimplementedAuthorizationServiceServer) Authorize(context.Context, *v1.AuthRequest) (*v1.AuthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Authorize not implemented")
}
func (UnimplementedAuthorizationServiceServer) GetAuthMessage(context.Context, *v1.AuthMessageRequest) (*v1.AuthMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAuthMessage not implemented")
}
func (UnimplementedAuthorizationServiceServer) Refresh(context.Context, *v1.RefreshMessageRequest) (*v1.RefreshMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Refresh not implemented")
}
func (UnimplementedAuthorizationServiceServer) mustEmbedUnimplementedAuthorizationServiceServer() {}

// UnsafeAuthorizationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthorizationServiceServer will
// result in compilation errors.
type UnsafeAuthorizationServiceServer interface {
	mustEmbedUnimplementedAuthorizationServiceServer()
}

func RegisterAuthorizationServiceServer(s grpc.ServiceRegistrar, srv AuthorizationServiceServer) {
	s.RegisterService(&AuthorizationService_ServiceDesc, srv)
}

func _AuthorizationService_Authorize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.AuthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizationServiceServer).Authorize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthorizationService_Authorize_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizationServiceServer).Authorize(ctx, req.(*v1.AuthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthorizationService_GetAuthMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.AuthMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizationServiceServer).GetAuthMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthorizationService_GetAuthMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizationServiceServer).GetAuthMessage(ctx, req.(*v1.AuthMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthorizationService_Refresh_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.RefreshMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizationServiceServer).Refresh(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthorizationService_Refresh_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizationServiceServer).Refresh(ctx, req.(*v1.RefreshMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AuthorizationService_ServiceDesc is the grpc.ServiceDesc for AuthorizationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AuthorizationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pegism.service.AuthorizationService",
	HandlerType: (*AuthorizationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Authorize",
			Handler:    _AuthorizationService_Authorize_Handler,
		},
		{
			MethodName: "GetAuthMessage",
			Handler:    _AuthorizationService_GetAuthMessage_Handler,
		},
		{
			MethodName: "Refresh",
			Handler:    _AuthorizationService_Refresh_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/service/auth.proto",
}
